import numpy as np


class Encryption:
    """
        Handling files and encrypting or decrypting it using key.
        Generating key for encryption
    """

    def __init__(self, input_key, input_file_name, output_file_name, key):
        self.input_file_name = input_file_name
        self.output_file_name = output_file_name
        self.pre_key = input_key
        self.key = key


class KeyGenerator:
    """
        Generating key with len 2**(maxlen of polinominal) - 1
        :param key: string with 1 or 0
        :param polinomial: list of current polinominal exs (e.g. if formula is X^4 + X + 1 then list is [4, 1]
        :return: list of bytes, generated by this key
    """

    def __init__(self, key_str, polinomial):
        self.key_list = self.convert_str_key_to_list(key_str)
        self.polinomial = polinomial

    def convert_str_key_to_list(self, key_str):
        return [int(key) for key in key_str]

    def generate_key(self, key, polinomial):

        def get_bit(key, bit):
            return (key >> bit - 1) and 1

        def insert_last_bit(key, bit):
            return (key << 1) + bit

        current_long_key = np.array(key)
        result_key_list = []
        for _ in range((2 ** polinomial[0]) // 8):
            current_key = 0
            for _ in range(8):
                current_key = insert_last_bit(current_key, current_long_key[0])
                for exp in polinomial[1:]:
                    current_long_key[0] ^= current_long_key[-exp]
                current_long_key = np.roll(current_long_key, -1)

            result_key_list.append(current_key)
        return result_key_list


if __name__ == '__main__':
    key = ['1111']
    test = KeyGenerator(key, [4, 1])
    # print(test.generate_key(key, [4, 1]))
